/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Write your model definitions here
 */

namespace org.agrotracker.network


/**
 * The type of perishable product being produced
 */
enum ProductType {
  o CANNABIS
  o COCA
  o POPPY
}

/**
 * The status of the production
 */
enum ProductionStatus {
  o PLANTED
  o HARVESTED
  o DELIVERED
}

/**
 * A concept for a simple street address
 */
concept Address {
  o String city optional
  o String country
  o String street optional
  o String zip optional
}

//----------------PARTICIPANTS-------------------------//

/**
 * An abstract participant type in this business network
 */
abstract participant Business identified by participantId {
  o String email
  o String name
  o String participantId //NIT , CC, Passport Etc
  o Boolean licensed 
  o Double accountBalance
  o Address address
}

/**
 * A Government Entity is a type of participant in the network
 */
participant Government extends Business {
}

/**
 * A Crop producer is a type of participant in the network
 */
participant Producer extends Business {
}

/**
 * A Consumer Entity is a type of participant in the network
 */
participant Consumer extends Business {
}

/**
 * An IoTDevice is any device that is part of the network
 */
abstract participant IoTDevice identified by deviceId {
  o String deviceId
}

/**
 * An IoT temperature sensor
 */
participant TemperatureSensor extends IoTDevice {
}

/**
 * An IoT relative humidity sensor
 */
participant RelativeHumiditySensor extends IoTDevice {
}

/**
 * An IoT Lux sensor
 */
participant LumenSensor extends IoTDevice {
}

/**
 * An IoT moisture sensor
 */
participant MoistureSensor extends IoTDevice {
}

//----------------ASSETS-------------------------//

/**
 * A product lot being tracked as an asset on the ledger
 */
asset PlantLot identified by lotId {
  o String lotId
  o ProductType type
  o ProductionStatus status
  o Long unitCount
  o TemperatureReading[] temperatureReadings optional
  o RelativeHumidityReading[] rhReadings optional
  o LumenReading[] lumenReadings optional
  o SoilMoistureReading[] moistureReadings optional
  o DocumentHash[] docHashes optional
  o ProcessNote[] processNotes optional
  o ProductReveived productReveived optional
  o ProductSeeded productSeeded optional
  o ProductHarvested productHarvested optional
  --> Contract contract
}

/**
 * Defines a contract between a Producer and a Consumer. The Government watches the process
 * The Consumer pays a set price. The unit price is multiplied by
 * a penality factor proportional to the deviation from the min and max
 * negociated temperatures for the product. 
 */
asset Contract identified by contractId {
  o String contractId
  --> Producer producer
  --> Consumer consumer
  --> Government government
  o DateTime deliveredDateTime
  o Double unitPrice
  o Double minTemperature
  o Double maxTemperature
  o Double minPenaltyFactor
  o Double maxPenaltyFactor
}

//----------------TRANSACTIONS-------------------------//

/**
 * An abstract transaction that is related to a plant Lot
 */
abstract transaction PlantLotTransaction {
  --> PlantLot lot
}

/**
 * A temperature reading in production. E.g. received from a
 * device 
 */
transaction TemperatureReading extends PlantLotTransaction {
  o Double temperature // in degrees Celcius (ÂºC)
}

/**
 * A relative humidity reading in production. E.g. received from a
 * device 
 */
transaction RelativeHumidityReading extends PlantLotTransaction {
  o Double rh // in percentage (%)
}

/**
 * A light intensity reading in production. E.g. received from a
 * device 
 */
transaction LumenReading extends PlantLotTransaction {
  o Double lumen // in LUX
}

/**
 * A soil moisture reading in production. E.g. received from a
 * device 
 */
transaction SoilMoistureReading extends PlantLotTransaction {
  o Double moisture // in percentage (%)
}

/**
 * A document or picture taken for quality control in production. Uploaded IPFS Hash
 */
transaction DocumentHash extends PlantLotTransaction {
  o String hash // IPFS Hash
}

/**
 * A note written during the process. Manual Input
 */
transaction ProcessNote extends PlantLotTransaction {
  o String note // String
}

/**
 * A notification that a shipment has been received by the
 * client and that funds should be transferred from the client
 * to the producer
 */
transaction ProductReveived extends PlantLotTransaction {
  o DateTime receivedDateTime optional
}

/**
 * A Lot has been seeded and is growing
 */
transaction ProductSeeded extends PlantLotTransaction {
}

/**
 * A Lot has been seeded and is growing
 */
transaction ProductHarvested extends PlantLotTransaction {
}

/**
 * The license has been revoked or given
 */
transaction ProductHarvested extends PlantLotTransaction {
  o Boolean licenseStatus
}


//----------------EVENTS-------------------------//

/**
 * An event - when the temperature goes outside the agreed-upon boundaries
 */
event TemperatureThresholdEvent {
  o String message
  o Double temperature
  --> PlantLot lot
}

/**
 * An event - when the product is received by the consumer
 */
event ProductReceivedEvent {
  o String message
  --> PlantLot lot
}
 
/**
 * An event - when the product is seeded
 */
event ProductSeededEvent {
  o String message
  --> PlantLot lot
}

/**
 * An event - when the product is harvested
 */
event ProductHarvestedEvent {
  o String message
  --> PlantLot lot
}

/**
 * JUST FOR INITIALIZING A DEMO
 */
transaction SetupDemo {
}

















//-----------------------------EXAMPLE ONLY -----------------------//


// participant SampleParticipant identified by participantId {
//   o String participantId
//   o String firstName
//   o String lastName
// }


// asset SampleAsset identified by assetId {
//   o String assetId
//   --> SampleParticipant owner
//   o String value
// }

// transaction SampleTransaction {
//   --> SampleAsset asset
//   o String newValue
// }

// event SampleEvent {
//   --> SampleAsset asset
//   o String oldValue
//   o String newValue
// }
