/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A business network for shipping perishable goods
 * The cargo is temperature controlled and contracts
 * can be negociated based on the temperature
 * readings received for the cargo
 */

namespace org.agrotracker.network

/**
 * The type of perishable product being shipped
 */
enum ProductType {
  o CANNABIS
  o COCA
  o POPPY
}

/**
 * The status of a lot
 */
enum ProductLotStatus {
  o SEEDED
  o HARVESTED
  o DELIVERED
}

/**
 * A concept for a simple street address
 */
concept Address {
  o String city optional
  o String country
  o String street optional
  o String zip optional
}

//-------------------PARTICIPANTS--------------------//


/**
 * An abstract participant type in this business network
 */
abstract participant Business identified by participantId {
  o String email
  o String participantId 
  o Address address
  o Double accountBalance optional
}

/**
 * A Producer is a type of participant in the network
 */
participant Producer extends Business {
}

/**
 * A Consumer is a type of participant in the network
 */
participant Consumer extends Business {
}

/**
 * An Government is a type of participant in the network
 */
participant Government extends Business {
}

/**
 * An IoTDevice is any device that is part of the network
 */
abstract participant IoTDevice identified by deviceId {
  o String deviceId
}

/**
 * An IoT temperature sensor
 */
participant TemperatureSensor extends IoTDevice {
}

/**
 * An Relative Humidity temperature sensor
 */
participant RhSensor extends IoTDevice {
}

//-------------------TRANSACTIONS--------------------//


/**
 * An abstract transaction that is related to a ProductLot
 */
abstract transaction ProductLotTransaction {
  --> ProductLot lot
}

/**
 * An temperature reading for a lot. E.g. received from a
 * device within a temperature controlled shipping container
 */
transaction TemperatureReading extends ProductLotTransaction {
  o Double temperature
}

/**
 * An RH reading for a lot
 */
transaction RhReading extends ProductLotTransaction {
  o Double humidity
}


/**
 * A notification that a lot has been received by the
 * government and that funds should be transferred from the government
 * to the producer to pay for the lot.
 */
transaction ProductLotReceived extends ProductLotTransaction {
}


//-------------------ASSETS--------------------//

/**
 * A lot being tracked as an asset on the ledger
 */
asset ProductLot identified by lotId {
  o String lotId
  o ProductType type
  o ProductLotStatus status
  o Long unitCount
  o TemperatureReading[] temperatureReadings optional
  o RhReading[] rhReadings optional
  --> Contract contract
}

/**
 * Defines a contract between a Producer and an Government to ship using
 * a Consumer, paying a set unit price. The unit price is multiplied by
 * a penality factor proportional to the deviation from the min and max
 * negociated temperatures for the lot.
 */
asset Contract identified by contractId {
  o String contractId
  --> Producer producer
  --> Consumer consumer
  // --> Government government
  o DateTime arrivalDateTime
  o Double unitPrice
  o Double minTemperature
  o Double maxTemperature
  o Double minPenaltyFactor
  o Double maxPenaltyFactor
}




//-------------------EVENTS--------------------//

/**
 * An event - when the temperature goes outside the agreed-upon boundaries
 */
event TemperatureThresholdEvent {
  o String message
  o Double temperature
  --> ProductLot lot
}

/**
 * JUST FOR INITIALIZING A DEMO
 */
transaction SetupDemo {
}